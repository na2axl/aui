name: Build Conanfile

on:
  push:
    branches:
      - master
      - develop
  pull_request:
    branches: [ master, develop ]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  GIT_SUBMODULE_STRATEGY: recursive

permissions:
  contents: write

jobs:
  test-on-msvc:
    strategy:
      fail-fast: false
      matrix:
        os: [windows-2025]
        os-name: [Windows]
        toolset: [142, 143]
        cppstd: ['20']
        build-type: [Debug, Release]
        exclude:
          - toolset: 142
            cppstd: '23'
        include:
          - toolset: 142
            conan-compiler-version: 192
          - toolset: 143
            conan-compiler-version: 194
          - build-type: Debug
            cmake-preset: conan-debug
          - build-type: Release
            cmake-preset: conan-release

    name: MSVC ${{ matrix.toolset }} - ${{ matrix.os-name }} - ${{ matrix.build-type }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v5

      - name: Install VS 2019 Build Tools v142
        if: matrix.toolset == 142
        shell: powershell
        run: |
          if (-not (Get-Command choco -ErrorAction SilentlyContinue)) {
            Set-ExecutionPolicy Bypass -Scope Process -Force
            [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
            iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
          }
          choco install -y visualstudio2019buildtools --package-parameters "--add Microsoft.VisualStudio.Workload.VCTools --add Microsoft.VisualStudio.Workload.NativeDesktop --add Microsoft.Component.MSBuild --add Microsoft.VisualStudio.Component.VC.v142.x86.x64 --add Microsoft.VisualStudio.Component.Windows10SDK.19041 --includeRecommended --installPath C:/Program Files (x86)/Microsoft Visual Studio/2019/BuildTools"

      - name: Install VS 2022 Build Tools v143
        if: matrix.toolset == 143
        shell: powershell
        run: |
          if (-not (Get-Command choco -ErrorAction SilentlyContinue)) {
            Set-ExecutionPolicy Bypass -Scope Process -Force
            [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
            iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
          }
          choco install -y visualstudio2022buildtools --package-parameters "--add Microsoft.VisualStudio.Component.Windows10SDK.26100"

      - name: Detect vcvarsall for VS 2019 Build Tools
        if: matrix.toolset == 142
        uses: ilammy/msvc-dev-cmd@v1.13.0
        with:
          arch: amd64
          vsversion: 2019
          sdk: 10.0.19041.0

      - name: Detect vcvarsall for VS 2022 Build Tools
        if: matrix.toolset == 143
        uses: ilammy/msvc-dev-cmd@v1.13.0
        with:
          arch: amd64
          vsversion: 2022
          sdk: 10.0.26100.0

      - name: Install CMake
        uses: lukka/get-cmake@latest
        with:
          cmakeVersion: 4.1.0
          ninjaVersion: latest

      - name: Install Conan
        uses: turtlebrowser/get-conan@main

      - name: Conan select default profile
        shell: powershell
        run: |
          choco install -y ninja
          conan --version
          conan profile detect

      - name: Get Conan home
        id: get-conan-home
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            echo "conan-home=$USERPROFILE/.conan2" >> $GITHUB_OUTPUT
          else
            echo "conan-home=$HOME/.conan2" >> $GITHUB_OUTPUT
          fi

      - name: Cache Conan packages
        uses: actions/cache@v4
        with:
          path: ${{ steps.get-conan-home.outputs.conan-home }}/p
          key: conan-${{ runner.os }}-${{ hashFiles('conanfile.*', 'conan.lock') }}
          restore-keys: |
            conan-${{ runner.os }}-

      - name: Install dependencies
        if: matrix.toolset == 142
        run: >
          conan install .
          -c tools.microsoft.msbuild:vs_version=16
          -c tools.microsoft:winsdk_version=10.0.19041.0
          -c tools.cmake.cmaketoolchain:generator=Ninja
          -s compiler.version=${{ matrix.conan-compiler-version }}
          -s compiler.cppstd=${{ matrix.cppstd }}
          -s build_type=${{ matrix.build-type }}
          --build=missing

      - name: Install dependencies
        if: matrix.toolset == 143
        run: >
          conan install .
          -c tools.microsoft.msbuild:vs_version=17
          -c tools.microsoft:winsdk_version=10.0.26100.0
          -c tools.cmake.cmaketoolchain:generator=Ninja
          -s compiler.version=${{ matrix.conan-compiler-version }}
          -s compiler.cppstd=${{ matrix.cppstd }}
          -s build_type=${{ matrix.build-type }}
          --build=missing

      - name: CMake Configure
        run: |
          cmake --list-presets
          cmake --preset ${{ matrix.cmake-preset }}

      - name: Build
        run: |
          cmake --build --list-presets
          cmake --build --preset ${{ matrix.cmake-preset }}

      - name: Test
        run: |
          ctest --list-presets
          ctest --preset ${{ matrix.cmake-preset }}

  test-on-clang:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        os-name: [Linux]
        cppstd: ['20']
        build-type: [Debug, Release]
        include:
          - os: ubuntu-latest
            clang-version: 20
          - build-type: Debug
            cmake-preset: conan-debug
          - build-type: Release
            cmake-preset: conan-release

    name: Clang ${{ matrix.clang-version }} - ${{ matrix.os-name }} - ${{ matrix.build-type }}
    runs-on: ${{ matrix.os }}
    container:
      image: ghcr.io/aui-framework/clang-20-conan-aui:latest
    steps:
      - uses: actions/checkout@v5

      - name: Symlink llvm-strip
        run: |
          ln -sf /usr/bin/llvm-strip-20 /usr/bin/strip

      - name: Set Clang as default compiler
        run: |
          echo "CC=clang" >> $GITHUB_ENV
          echo "CXX=clang++" >> $GITHUB_ENV

      - name: Install Conan
        run: |
          pipx ensurepath
          pipx install conan

      - name: Add pipx bin to PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Setup Conan
        run: |
          conan --version
          conan profile detect

      - name: Get Conan home
        id: get-conan-home
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            echo "conan-home=$USERPROFILE/.conan2" >> $GITHUB_OUTPUT
          else
            echo "conan-home=$HOME/.conan2" >> $GITHUB_OUTPUT
          fi

      - name: Cache Conan packages
        uses: actions/cache@v4
        with:
          path: ${{ steps.get-conan-home.outputs.conan-home }}/p
          key: conan-${{ runner.os }}-${{ hashFiles('conanfile.*', 'conan.lock') }}
          restore-keys: |
            conan-${{ runner.os }}-

      - name: Install dependencies
        run: >
          conan install . \
            -c tools.cmake.cmaketoolchain:generator=Ninja \
            -s compiler=clang \
            -s compiler.version=${{ matrix.clang-version }} \
            -s compiler.cppstd=${{ matrix.cppstd }} \
            -s build_type=${{ matrix.build-type }} \
            --build=missing

      - name: CMake Configure
        run: |
          cmake --list-presets
          cmake --preset ${{ matrix.cmake-preset }}

      - name: Build
        run: |
          cmake --build --list-presets
          cmake --build --preset ${{ matrix.cmake-preset }}

      - name: Test
        run: |
          ctest --list-presets
          ctest --preset ${{ matrix.cmake-preset }}

  test-on-gcc:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        os-name: [Linux]
        cppstd: ['20']
        build-type: [Debug, Release]
        include:
          - os: ubuntu-latest
            gcc-version: 15
          - build-type: Debug
            cmake-preset: conan-debug
          - build-type: Release
            cmake-preset: conan-release

    name: GCC ${{ matrix.gcc-version }} - ${{ matrix.os-name }} - ${{ matrix.build-type }}
    runs-on: ${{ matrix.os }}
    container:
      image: ghcr.io/aui-framework/gcc-15-conan-aui:latest
    steps:
      - uses: actions/checkout@v5

      - name: Set GCC as default compiler
        run: |
          echo "CC=gcc" >> $GITHUB_ENV
          echo "CXX=g++" >> $GITHUB_ENV

      - name: Install Conan
        run: |
          pipx ensurepath
          pipx install conan

      - name: Add pipx bin to PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Setup Conan
        run: |
          conan --version
          conan profile detect

      - name: Get Conan home
        id: get-conan-home
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            echo "conan-home=$USERPROFILE/.conan2" >> $GITHUB_OUTPUT
          else
            echo "conan-home=$HOME/.conan2" >> $GITHUB_OUTPUT
          fi

      - name: Cache Conan packages
        uses: actions/cache@v4
        with:
          path: ${{ steps.get-conan-home.outputs.conan-home }}/p
          key: conan-${{ runner.os }}-${{ hashFiles('conanfile.*', 'conan.lock') }}
          restore-keys: |
            conan-${{ runner.os }}-

      - name: Install dependencies
        run: >
          conan install . \
            -c tools.cmake.cmaketoolchain:generator=Ninja \
            -s compiler=gcc \
            -s compiler.version=${{ matrix.gcc-version }} \
            -s compiler.cppstd=${{ matrix.cppstd }} \
            -s build_type=${{ matrix.build-type }} \
            --build=missing

      - name: CMake Configure
        run: |
          cmake --list-presets
          cmake --preset ${{ matrix.cmake-preset }}

      - name: Build
        run: |
          cmake --build --list-presets
          cmake --build --preset ${{ matrix.cmake-preset }}

      - name: Test
        run: |
          ctest --list-presets
          ctest --preset ${{ matrix.cmake-preset }}

  test-on-appleclang:
    strategy:
      fail-fast: false
      matrix:
        os: [macos-14]
        os-name: [MacOS]
        cppstd: ['20']
        build-type: [Debug, Release]
        arch: ['x86_64', 'armv8']
        include:
          - os: macos-14
            appleclang-version: 15
          - build-type: Debug
            cmake-preset: conan-debug
          - build-type: Release
            cmake-preset: conan-release

    name: AppleClang ${{ matrix.appleclang-version }} ${{ matrix.arch }} - ${{ matrix.os-name }} - ${{ matrix.build-type }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v5

      - name: Install CMake
        uses: lukka/get-cmake@latest
        with:
          cmakeVersion: 4.1.0
          ninjaVersion: latest

      - name: Install Xcode 15.4.0
        if: matrix.appleclang-version == 15
        uses: maxim-lobanov/setup-xcode@v1.6.0
        with:
          xcode-version: '15.4.0'

      - name: Install system dependencies
        run: |
          brew update
          brew install ninja git python3 conan

      - name: Setup Conan
        run: |
          conan --version
          conan profile detect

      - name: Get Conan home
        id: get-conan-home
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            echo "conan-home=$USERPROFILE/.conan2" >> $GITHUB_OUTPUT
          else
            echo "conan-home=$HOME/.conan2" >> $GITHUB_OUTPUT
          fi

      - name: Cache Conan packages
        uses: actions/cache@v4
        with:
          path: ${{ steps.get-conan-home.outputs.conan-home }}/p
          key: conan-${{ runner.os }}-${{ hashFiles('conanfile.*', 'conan.lock') }}
          restore-keys: |
            conan-${{ runner.os }}-

      - name: Install dependencies
        run: >
          conan install . \
            -c tools.cmake.cmaketoolchain:generator=Ninja \
            -s compiler=apple-clang \
            -s compiler.version=${{ matrix.appleclang-version }} \
            -s compiler.cppstd=${{ matrix.cppstd }} \
            -s arch=${{ matrix.arch }} \
            -s build_type=${{ matrix.build-type }} \
            --build=missing

      - name: CMake Configure
        run: |
          cmake --list-presets
          cmake --preset ${{ matrix.cmake-preset }}

      - name: Build
        run: |
          cmake --build --list-presets
          cmake --build --preset ${{ matrix.cmake-preset }}

      - name: Test
        run: |
          ctest --list-presets
          ctest --preset ${{ matrix.cmake-preset }}

  test-on-appleclang-ios:
    strategy:
      fail-fast: false
      matrix:
        os: [macos-14]
        os-name: [MacOS]
        cppstd: ['20']
        build-type: [Debug, Release]
        arch: ['armv8']
        include:
          - os: macos-14
            appleclang-version: 15
          - build-type: Debug
            cmake-preset: conan-debug
          - build-type: Release
            cmake-preset: conan-release

    name: AppleClang iOS ${{ matrix.appleclang-version }} ${{ matrix.arch }} - ${{ matrix.os-name }} - ${{ matrix.build-type }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v5

      - name: Install CMake
        uses: lukka/get-cmake@latest
        with:
          cmakeVersion: 4.1.0
          ninjaVersion: latest        

      - name: Install Xcode 15.4.0
        if: matrix.appleclang-version == 15
        uses: maxim-lobanov/setup-xcode@v1.6.0
        with:
          xcode-version: '15.4.0'

      - name: Install system dependencies
        run: |
          brew update
          brew install ninja git python3 conan

      - name: Setup Conan
        run: |
          conan --version
          conan profile detect

      - name: Get Conan home
        id: get-conan-home
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            echo "conan-home=$USERPROFILE/.conan2" >> $GITHUB_OUTPUT
          else
            echo "conan-home=$HOME/.conan2" >> $GITHUB_OUTPUT
          fi

      - name: Cache Conan packages
        uses: actions/cache@v4
        with:
          path: ${{ steps.get-conan-home.outputs.conan-home }}/p
          key: conan-${{ runner.os }}-${{ hashFiles('conanfile.*', 'conan.lock') }}
          restore-keys: |
            conan-${{ runner.os }}-

      - name: Create Conan profile
        run: |
          mkdir -p ~/.conan2/profiles
          cat > ~/.conan2/profiles/ios <<EOF
          [settings]
          os=iOS
          os.version=15.0
          os.sdk=iphoneos
          arch=armv8
          compiler=apple-clang
          compiler.version=${{ matrix.appleclang-version }}
          compiler.libcxx=libc++
          compiler.cppstd=${{ matrix.cppstd }}
          build_type=${{ matrix.build-type }}
          [conf]
          tools.cmake.cmaketoolchain:generator=Ninja
          EOF

      - name: Install dependencies (iOS)
        run: >
          conan install . \
            -c tools.cmake.cmaketoolchain:generator=Ninja \
            --profile:build=default --profile:host=ios \
            --settings compiler.cppstd=${{ matrix.cppstd }} \
            --build=missing

      - name: CMake Configure (iOS)
        run: |
          cmake --list-presets
          cmake --preset ${{ matrix.cmake-preset }}

      - name: Build (iOS)
        run: |
          cmake --build --list-presets
          cmake --build --preset ${{ matrix.cmake-preset }}

      - name: Test (iOS)
        run: |
          ctest --list-presets
          ctest --preset ${{ matrix.cmake-preset }}

  test-on-android-linux:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        os-name: [Linux]
        cppstd: ['20']
        build-type: [Debug, Release]
        arch: ['armv7', 'armv8']
        include:
          - os: ubuntu-latest
            ndk-version: 28b
          - build-type: Debug
            cmake-preset: conan-debug
          - build-type: Release
            cmake-preset: conan-release

    name: NDK ${{ matrix.ndk-version }} ${{ matrix.arch }} - ${{ matrix.os-name }} - ${{ matrix.build-type }}
    runs-on: ${{ matrix.os }}
    container:
      image: ghcr.io/aui-framework/ndk-28b-conan-aui:latest
    steps:
      - uses: actions/checkout@v5

      - name: Set clang as default compiler
        run: |
          echo "CC=clang" >> $GITHUB_ENV
          echo "CXX=clang++" >> $GITHUB_ENV
          echo "ANDROID_NDK_ROOT=/opt/android-ndk-r28b" >> $GITHUB_ENV
          echo "/opt/android-ndk-r28b/toolchains/llvm/prebuilt/linux-x86_64/bin/" >> $GITHUB_PATH

      - name: Install Conan
        run: |
          pipx ensurepath
          pipx install conan

      - name: Add pipx bin to PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Setup Conan
        run: |
          conan --version
          conan profile detect

      - name: Get Conan home
        id: get-conan-home
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            echo "conan-home=$USERPROFILE/.conan2" >> $GITHUB_OUTPUT
          else
            echo "conan-home=$HOME/.conan2" >> $GITHUB_OUTPUT
          fi

      - name: Cache Conan packages
        uses: actions/cache@v4
        with:
          path: ${{ steps.get-conan-home.outputs.conan-home }}/p
          key: conan-${{ runner.os }}-${{ hashFiles('conanfile.*', 'conan.lock') }}
          restore-keys: |
            conan-${{ runner.os }}-

      - name: Create Conan Android profile
        run: |
          mkdir -p ~/.conan2/profiles
          cat > ~/.conan2/profiles/android <<EOF
          [settings]
          os=Android
          os.api_level=28
          arch=${{ matrix.arch }}
          compiler=clang
          compiler.version=20
          compiler.cppstd=${{ matrix.cppstd }}
          build_type=${{ matrix.build-type }}
          [conf]
          tools.android:ndk_path=$ANDROID_NDK_ROOT
          tools.cmake.cmaketoolchain:generator=Ninja
          EOF

      - name: Install dependencies (Android)
        run: >
          conan install . \
            -c tools.android:ndk_path=$ANDROID_NDK_ROOT \
            -c tools.cmake.cmaketoolchain:generator=Ninja \
            -s arch=${{ matrix.arch }} \
            -s os=Android \
            -s os.api_level=28 \
            -s compiler=clang \
            -s compiler.version=20 \
            -s compiler.cppstd=${{ matrix.cppstd }} \
            -s build_type=${{ matrix.build-type }} \
            --profile:build=default --profile:host=android \
            --build=missing

      - name: CMake Configure (Android)
        run: |
          cmake --list-presets
          cmake --preset ${{ matrix.cmake-preset }}

      - name: Build (Android)
        run: |
          cmake --build --list-presets
          cmake --build --preset ${{ matrix.cmake-preset }}

      - name: Test (Android)
        run: |
          ctest --list-presets
          ctest --preset ${{ matrix.cmake-preset }}
